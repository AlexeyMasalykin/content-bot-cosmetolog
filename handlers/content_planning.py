# handlers/content_planning.py
from telebot.types import Message, CallbackQuery
import logging
from datetime import datetime

from state import scheduled_posts, planning_states, store_lock, save_state
from utils.openai_utils import edit_topics, generate_text, generate_image_prompt
from utils.yandex_utils import generate_image_bytes_with_yc
from utils.tg_utils import (
    topics_approval_keyboard,
    posts_approval_keyboard,
    send_post_with_image,
)

log = logging.getLogger("tg-vk-bot")


def register(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–µ–º
    @bot.callback_query_handler(func=lambda c: c.data == "approve_topics")
    def approve_topics(call: CallbackQuery):
        chat_id = call.message.chat.id

        with store_lock:
            pending = scheduled_posts.get("pending_topics")
            if not pending or pending["status"] != "waiting_approval":
                bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ç–µ–º –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
                return

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–º—ã –≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
            scheduled_posts["approved_topics"] = pending["topics"]
            scheduled_posts["pending_topics"] = None
            save_state()

        bot.answer_callback_query(call.id, "‚úÖ –¢–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω—ã!")
        bot.send_message(chat_id, "‚úÖ –¢–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω—ã! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤...", reply_markup=None)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤
        _generate_posts_for_topics(bot, chat_id)

    @bot.callback_query_handler(func=lambda c: c.data == "edit_topics")
    def ask_edit_topics(call: CallbackQuery):
        chat_id = call.message.chat.id
        planning_states[chat_id] = {"action": "waiting_topics_edit"}

        bot.answer_callback_query(call.id, "‚úèÔ∏è –û–∂–∏–¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã (—Å—Ç–∏–ª—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è):")

    @bot.callback_query_handler(func=lambda c: c.data == "custom_topics")
    def ask_custom_topics(call: CallbackQuery):
        chat_id = call.message.chat.id
        planning_states[chat_id] = {"action": "waiting_custom_topics"}

        bot.answer_callback_query(call.id, "‚úèÔ∏è –û–∂–∏–¥–∞—é –≤–∞—à–∏ —Ç–µ–º—ã")
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ 3 —Ç–µ–º—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    @bot.callback_query_handler(func=lambda c: c.data.startswith("approve_post_"))
    def approve_post(call: CallbackQuery):
        chat_id = call.message.chat.id
        post_index = int(call.data.split("_")[-1])

        with store_lock:
            pending_posts = scheduled_posts.get("pending_posts", [])
            if post_index >= len(pending_posts):
                bot.answer_callback_query(call.id, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–¥–æ–±—Ä—è–µ–º –ø–æ—Å—Ç
            post = pending_posts[post_index]
            post["status"] = "approved"

            if "approved_posts" not in scheduled_posts:
                scheduled_posts["approved_posts"] = []
            scheduled_posts["approved_posts"].append(post)
            save_state()

        bot.answer_callback_query(call.id, "‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        _show_next_post_or_finish(bot, chat_id, post_index)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_post_"))
    def ask_edit_post(call: CallbackQuery):
        chat_id = call.message.chat.id
        post_index = int(call.data.split("_")[-1])

        planning_states[chat_id] = {"action": "waiting_post_edit", "post_index": post_index}

        bot.answer_callback_query(call.id, "‚úèÔ∏è –û–∂–∏–¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç (—Å—Ç–∏–ª—å, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –∞–∫—Ü–µ–Ω—Ç—ã):")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("next_post_"))
    def show_next_post(call: CallbackQuery):
        chat_id = call.message.chat.id
        post_index = int(call.data.split("_")[-1])

        _show_post_for_approval(bot, chat_id, post_index)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data == "finish_planning")
    def finish_planning(call: CallbackQuery):
        chat_id = call.message.chat.id

        with store_lock:
            approved_count = len(scheduled_posts.get("approved_posts", []))
            # –û—á–∏—â–∞–µ–º pending_posts –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            scheduled_posts["pending_posts"] = []
            save_state()

        bot.answer_callback_query(call.id, "üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        message = "üéØ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        message += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {approved_count}\n"
        message += "üìÖ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
        message += "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 19:00 –ú–°–ö\n"
        message += "‚Ä¢ –°—Ä–µ–¥–∞ 19:00 –ú–°–ö\n"
        message += "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞ 19:00 –ú–°–ö\n\n"
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."

        bot.send_message(chat_id, message, parse_mode="Markdown")


def handle_planning_message(bot, msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    chat_id = msg.chat.id
    state = planning_states.get(chat_id, {})
    action = state.get("action")

    if action == "waiting_topics_edit":
        _handle_topics_edit(bot, msg)
    elif action == "waiting_custom_topics":
        _handle_custom_topics(bot, msg)
    elif action == "waiting_post_edit":
        _handle_post_edit(bot, msg)


def _handle_topics_edit(bot, msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º"""
    chat_id = msg.chat.id
    instruction = msg.text.strip()

    if not instruction:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã.")
        return

    with store_lock:
        pending = scheduled_posts.get("pending_topics")
        if not pending:
            bot.send_message(chat_id, "‚ùå –ù–µ—Ç —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            planning_states.pop(chat_id, None)
            return

        current_topics = pending["topics"]

    try:
        bot.send_message(chat_id, "üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ç–µ–º—ã...")
        new_topics = edit_topics(current_topics, instruction)

        with store_lock:
            scheduled_posts["pending_topics"]["topics"] = new_topics
            save_state()

        message = "‚úèÔ∏è **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:**\n\n"
        for i, topic in enumerate(new_topics, 1):
            message += f"{i}. {topic}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        bot.send_message(chat_id, message, reply_markup=topics_approval_keyboard(), parse_mode="Markdown")

    except Exception as e:
        log.exception("Error editing topics")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º: {e}")

    planning_states.pop(chat_id, None)


def _handle_custom_topics(bot, msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–º—ã"""
    chat_id = msg.chat.id
    text = msg.text.strip()

    if not text:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—ã.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–º—ã
    topics = [topic.strip() for topic in text.split("\n") if topic.strip()]

    if len(topics) < 3:
        bot.send_message(chat_id, f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç–µ–º—ã, –ø–æ–ª—É—á–µ–Ω–æ: {len(topics)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–º—ã
    topics = topics[:3]

    with store_lock:
        scheduled_posts["pending_topics"] = {
            "topics": topics,
            "status": "waiting_approval",
            "generated_at": datetime.now().isoformat(),
        }
        save_state()

    message = "üìù **–í–∞—à–∏ —Ç–µ–º—ã:**\n\n"
    for i, topic in enumerate(topics, 1):
        message += f"{i}. {topic}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    bot.send_message(chat_id, message, reply_markup=topics_approval_keyboard(), parse_mode="Markdown")

    planning_states.pop(chat_id, None)


def _handle_post_edit(bot, msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    chat_id = msg.chat.id
    instruction = msg.text.strip()
    state = planning_states.get(chat_id, {})
    post_index = state.get("post_index", 0)

    if not instruction:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç.")
        return

    with store_lock:
        pending_posts = scheduled_posts.get("pending_posts", [])
        if post_index >= len(pending_posts):
            bot.send_message(chat_id, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            planning_states.pop(chat_id, None)
            return

        post = pending_posts[post_index]

    try:
        bot.send_message(chat_id, "üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –ø–æ—Å—Ç...")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        from utils.openai_utils import _openai_chat

        prompt = (
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–∞–∫—Ç—ã, —É–ª—É—á—à–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —è—Å–Ω–æ—Å—Ç—å. "
            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
            f"–¢–ï–ö–°–¢:\n{post['text']}\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø:\n{instruction}"
        )
        new_text = _openai_chat([{"role": "user", "content": prompt}], "gpt-4o")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        new_prompt = generate_image_prompt(new_text)
        new_image_bytes = generate_image_bytes_with_yc(new_prompt)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        with store_lock:
            from scheduler import ScheduledPost

            old_post_data = pending_posts[post_index]
            updated_post = ScheduledPost.from_dict(old_post_data)
            updated_post.text = new_text
            updated_post.image_bytes = new_image_bytes
            pending_posts[post_index] = updated_post.to_dict()
            save_state()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        _show_post_for_approval(bot, chat_id, post_index)

    except Exception as e:
        log.exception("Error editing post")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

    planning_states.pop(chat_id, None)


def _generate_posts_for_topics(bot, chat_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–µ–º"""
    try:
        with store_lock:
            topics = scheduled_posts.get("approved_topics", [])

        if not topics:
            bot.send_message(chat_id, "‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–µ–º.")
            return

        bot.send_message(chat_id, f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {len(topics)} –ø–æ—Å—Ç–æ–≤, —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...")

        posts = []
        for i, topic in enumerate(topics, 1):
            try:
                bot.send_message(chat_id, f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç {i}/{len(topics)}: {topic[:50]}...")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                text = generate_text(topic)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_prompt = generate_image_prompt(text)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_bytes = generate_image_bytes_with_yc(image_prompt)

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
                from scheduler import ScheduledPost

                post = ScheduledPost(
                    topic=topic, text=text, image_bytes=image_bytes, publish_date=None, status="pending"
                )
                posts.append(post.to_dict())

            except Exception as e:
                log.exception(f"Error generating post for topic: {topic}")
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ–º—ã '{topic[:30]}...': {e}")

        if posts:
            with store_lock:
                scheduled_posts["pending_posts"] = posts
                save_state()

            bot.send_message(chat_id, f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
            _show_post_for_approval(bot, chat_id, 0)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")

    except Exception as e:
        log.exception("Error generating posts")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")


def _show_post_for_approval(bot, chat_id: int, post_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    with store_lock:
        pending_posts = scheduled_posts.get("pending_posts", [])

    if post_index >= len(pending_posts):
        bot.send_message(chat_id, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    post_data = pending_posts[post_index]
    total_posts = len(pending_posts)

    try:
        from scheduler import ScheduledPost

        post = ScheduledPost.from_dict(post_data)

        full_text = f"üìù **–ü–æ—Å—Ç {post_index + 1} –∏–∑ {total_posts}**\n\n"
        full_text += f"**–¢–µ–º–∞:** {post.topic}\n\n"
        full_text += post.text

        send_post_with_image(
            bot,
            chat_id,
            full_text,
            post.image_bytes,
            reply_markup=posts_approval_keyboard(post_index, total_posts),
            parse_mode="Markdown",
        )
    except Exception as e:
        log.exception("Error showing post for approval")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")


def _show_next_post_or_finish(bot, chat_id: int, current_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    with store_lock:
        pending_posts = scheduled_posts.get("pending_posts", [])

    next_index = current_index + 1

    if next_index < len(pending_posts):
        _show_post_for_approval(bot, chat_id, next_index)
    else:
        # –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
        approved_count = len(scheduled_posts.get("approved_posts", []))

        message = "üéØ **–í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!**\n\n"
        message += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {approved_count}\n\n"

        if approved_count > 0:
            message += "üìÖ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
            message += "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 19:00 –ú–°–ö\n"
            message += "‚Ä¢ –°—Ä–µ–¥–∞ 19:00 –ú–°–ö\n"
            message += "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞ 19:00 –ú–°–ö\n\n"
            message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        else:
            message += "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç."

        bot.send_message(chat_id, message, parse_mode="Markdown")
