# handlers/admin.py
from telebot.types import Message, CallbackQuery
import logging
from datetime import datetime

from state import scheduled_posts, store_lock, save_state
from utils.tg_utils import admin_keyboard, topics_approval_keyboard
from utils.openai_utils import generate_topics
from scheduler import content_scheduler

log = logging.getLogger("tg-vk-bot")

def register(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    
    @bot.message_handler(commands=["admin"])
    def admin_panel(msg: Message):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
        chat_id = msg.chat.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–∏–π
        if content_scheduler:
            content_scheduler.set_admin_chat_id(chat_id)
        
        message = "üîß **–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        message += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤."
        
        bot.send_message(
            chat_id,
            message,
            reply_markup=admin_keyboard(),
            parse_mode='Markdown'
        )
    
    @bot.message_handler(commands=["start_scheduler"])
    def start_scheduler_cmd(msg: Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        chat_id = msg.chat.id
        
        if content_scheduler:
            content_scheduler.set_admin_chat_id(chat_id)
            content_scheduler.start_scheduler()
            bot.send_message(
                chat_id,
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                "‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 16:00 –ú–°–ö - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º\n"
                "‚Ä¢ –ü–Ω/–°—Ä/–ü—Ç 19:00 –ú–°–ö - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"
            )
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @bot.message_handler(commands=["stop_scheduler"])
    def stop_scheduler_cmd(msg: Message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        chat_id = msg.chat.id
        
        if content_scheduler:
            content_scheduler.stop_scheduler()
            bot.send_message(chat_id, "‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            bot.send_message(chat_id, "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    @bot.callback_query_handler(func=lambda c: c.data == "admin_status")
    def show_status(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        chat_id = call.message.chat.id
        
        with store_lock:
            pending_topics = scheduled_posts.get("pending_topics")
            approved_topics = scheduled_posts.get("approved_topics", [])
            pending_posts = scheduled_posts.get("pending_posts", [])
            approved_posts = scheduled_posts.get("approved_posts", [])
            published_posts = scheduled_posts.get("published_posts", [])
        
        message = "üìä **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        
        # –¢–µ–º—ã
        if pending_topics and pending_topics["status"] == "waiting_approval":
            message += f"üü° –¢–µ–º—ã –æ–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {len(pending_topics['topics'])}\n"
        elif approved_topics:
            message += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {len(approved_topics)}\n"
        else:
            message += "‚ö™ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º\n"
        
        # –ü–æ—Å—Ç—ã
        message += f"üü° –ü–æ—Å—Ç—ã –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏: {len(pending_posts)}\n"
        message += f"‚úÖ –ü–æ—Å—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏: {len(approved_posts)}\n"
        message += f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {len(published_posts)}\n\n"
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if (content_scheduler and content_scheduler.running) else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        message += f"ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}\n"
        
        # –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        if approved_posts:
            message += f"\nüìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: –±–ª–∏–∂–∞–π—à–∏–π –ü–Ω/–°—Ä/–ü—Ç –≤ 19:00 –ú–°–ö"
        
        bot.send_message(chat_id, message, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda c: c.data == "admin_generate_topics")
    def generate_topics_manually(call: CallbackQuery):
        """–†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º"""
        chat_id = call.message.chat.id
        
        bot.answer_callback_query(call.id, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–º—ã...")
        
        try:
            topics = generate_topics()
            
            with store_lock:
                scheduled_posts["pending_topics"] = {
                    "topics": topics,
                    "status": "waiting_approval",
                    "generated_at": datetime.now().isoformat()
                }
                save_state()
            
            message = "üóìÔ∏è **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:**\n\n"
            for i, topic in enumerate(topics, 1):
                message += f"{i}. {topic}\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            bot.send_message(
                chat_id,
                message,
                reply_markup=topics_approval_keyboard(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            log.exception("Error generating topics manually")
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: {e}")
    
    @bot.callback_query_handler(func=lambda c: c.data == "admin_queue")
    def show_queue(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
        chat_id = call.message.chat.id
        
        with store_lock:
            approved_posts = scheduled_posts.get("approved_posts", [])
        
        if not approved_posts:
            bot.send_message(chat_id, "üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞")
            bot.answer_callback_query(call.id)
            return
        
        message = f"üìã **–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({len(approved_posts)} –ø–æ—Å—Ç–æ–≤)**\n\n"
        
        for i, post in enumerate(approved_posts, 1):
            topic = post.get("topic", "–ë–µ–∑ —Ç–µ–º—ã")[:50]
            message += f"{i}. {topic}...\n"
        
        message += f"\nüìÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ü–Ω/–°—Ä/–ü—Ç –≤ 19:00 –ú–°–ö"
        
        bot.send_message(chat_id, message, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda c: c.data == "admin_stats")
    def show_stats(call: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        chat_id = call.message.chat.id
        
        with store_lock:
            published_posts = scheduled_posts.get("published_posts", [])
            approved_posts = scheduled_posts.get("approved_posts", [])
        
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        message += f"üì§ –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)}\n"
        message += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {len(approved_posts)}\n"
        
        if published_posts:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            last_post = published_posts[-1]
            last_topic = last_post.get("topic", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:50]
            message += f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_topic}...\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
            from datetime import datetime, timedelta
            now = datetime.now()
            week_ago = now - timedelta(days=7)
            
            recent_posts = [
                p for p in published_posts 
                if p.get("publish_date") and 
                datetime.fromisoformat(p["publish_date"].replace("Z", "+00:00")) > week_ago
            ]
            
            message += f"üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {len(recent_posts)} –ø–æ—Å—Ç–æ–≤"
        
        bot.send_message(chat_id, message, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
