from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

def clean_markdown(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç Markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª—ã.
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã: *, **, #, ###, –∏ —Ç.–¥.
    """
    import re
    
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**text** –∏ __text__)
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'__(.*?)__', r'\1', text)
    
    # –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤ (*text* –∏ _text_)
    text = re.sub(r'\*(.*?)\*', r'\1', text)
    text = re.sub(r'_(.*?)_', r'\1', text)
    
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ## ###)
    text = re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ * –∏ #
    text = re.sub(r'(?<!\S)\*(?!\S)', '', text)  # –æ–¥–∏–Ω–æ—á–Ω—ã–µ *
    text = re.sub(r'(?<!\S)#(?!\S)', '', text)   # –æ–¥–∏–Ω–æ—á–Ω—ã–µ #
    
    return text.strip()

def truncate_caption(text: str, max_len: int = 1024) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è caption (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è VK fallback)"""
    if text is None:
        return ""
    if len(text) <= max_len:
        return text
    truncated = text[:max_len]
    last_dot = truncated.rfind('.')
    return truncated[:last_dot+1] if last_dot != -1 else truncated + "..."

def smart_vk_text(text: str) -> str:
    """
    –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è VK:
    - –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ 15000 —Å–∏–º–≤–æ–ª–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
    - –ï—Å–ª–∏ –±–æ–ª—å—à–µ - –æ–±—Ä–µ–∑–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ
    """
    if not text:
        return ""
    
    clean_text = clean_markdown(text)
    
    # VK –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 16000 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
    if len(clean_text) <= 15000:
        return clean_text
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ–±—Ä–µ–∑–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ
    truncated = clean_text[:14500]  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è "..."
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    last_sentence = truncated.rfind('.')
    if last_sentence > 10000:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        return truncated[:last_sentence + 1] + "\n\n... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)"
    
    # –ï—Å–ª–∏ –Ω–µ—Ç - –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
    last_paragraph = truncated.rfind('\n\n')
    if last_paragraph > 8000:
        return truncated[:last_paragraph] + "\n\n... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)"
    
    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
    return truncated + "..."

def send_post_with_image(bot, chat_id, text: str, image_bytes: bytes, reply_markup=None, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç.
    """
    import io
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ caption
    if len(text) <= 1000:
        try:
            return bot.send_photo(
                chat_id,
                io.BytesIO(image_bytes),
                caption=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bot.send_photo(chat_id, io.BytesIO(image_bytes))
        
        # –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        return bot.send_message(
            chat_id,
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        return bot.send_message(
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n{text}",
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )

def action_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
        InlineKeyboardButton("üé® –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="edit_image"),
    )
    kb.row(
        InlineKeyboardButton("üì¢ –í Telegram", callback_data="publish_post"),
        InlineKeyboardButton("üñºÔ∏è –í VK", callback_data="publish_vk_photo"),
    )
    kb.row(
        InlineKeyboardButton("üìù –í VK (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)", callback_data="publish_vk_text"),
    )
    return kb

def topics_approval_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–µ–º"""
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–µ–º—ã", callback_data="approve_topics"),
        InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã", callback_data="edit_topics"),
    )
    kb.row(
        InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —Ç–µ–º—ã", callback_data="custom_topics")
    )
    return kb

def posts_approval_keyboard(post_index: int, total_posts: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_post_{post_index}"),
        InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_index}"),
    )
    if post_index < total_posts - 1:
        kb.row(InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", callback_data=f"next_post_{post_index + 1}"))
    else:
        kb.row(InlineKeyboardButton("üéØ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="finish_planning"))
    return kb

def admin_keyboard() -> InlineKeyboardMarkup:
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üìÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="admin_status"),
        InlineKeyboardButton("üóìÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã", callback_data="admin_generate_topics"),
    )
    kb.row(
        InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="admin_queue"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
    )
    return kb